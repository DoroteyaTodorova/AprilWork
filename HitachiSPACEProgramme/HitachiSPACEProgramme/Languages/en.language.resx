<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptableClouds" xml:space="preserve">
    <value>Acceptable Cloud Types:</value>
  </data>
  <data name="AcceptableCloudTypesSuccess" xml:space="preserve">
    <value>Acceptable cloud types changed successfully.</value>
  </data>
  <data name="AcceptLightnings" xml:space="preserve">
    <value>Accept Lightnings:</value>
  </data>
  <data name="AcceptLightningsPrompt" xml:space="preserve">
    <value>Accept lightnings? (Yes/No):</value>
  </data>
  <data name="AcceptLightningsSetNo" xml:space="preserve">
    <value>Accept lightnings set to No.</value>
  </data>
  <data name="AcceptLightningsSetYes" xml:space="preserve">
    <value>Accept lightnings set to Yes.</value>
  </data>
  <data name="BestSpaceport_Message" xml:space="preserve">
    <value>Best Spaceport: {0}, Day: {1}</value>
  </data>
  <data name="ChangeCriteriaPrompt" xml:space="preserve">
    <value>Enter the number of the criteria you want to change or 0 if you dont want to make changes:</value>
  </data>
  <data name="ChooseEmailProvider" xml:space="preserve">
    <value>Choose your email service provider: (If you choose Gmail get your app password)</value>
  </data>
  <data name="CloudTypesChanged" xml:space="preserve">
    <value>Acceptable cloud types changed successfully.</value>
  </data>
  <data name="CloudTypesPrompt" xml:space="preserve">
    <value>Enter the acceptable cloud types (comma-separated):</value>
  </data>
  <data name="CriteriaFile_Checking" xml:space="preserve">
    <value>Checking file: {0}</value>
  </data>
  <data name="CriteriaFile_EnterCriteria" xml:space="preserve">
    <value>Enter criteria for file: {0}</value>
  </data>
  <data name="CriteriaFile_Prompt" xml:space="preserve">
    <value>Do you want to change criteria for file [Yes/No]: {0}</value>
  </data>
  <data name="Criteria_ContinueOption" xml:space="preserve">
    <value>No, continue with current criteria</value>
  </data>
  <data name="Criteria_ModifyFileOption" xml:space="preserve">
    <value>Yes, I want to modify a criteria for specific file</value>
  </data>
  <data name="Criteria_ModifyPrompt" xml:space="preserve">
    <value>Do you want to modify any criteria?[1/2/3/4]</value>
  </data>
  <data name="Criteria_NoOption" xml:space="preserve">
    <value>No, show current criteria</value>
  </data>
  <data name="Criteria_YesOption" xml:space="preserve">
    <value>Yes, modify criteria</value>
  </data>
  <data name="CurrentCriteria" xml:space="preserve">
    <value>Current criteria values:</value>
  </data>
  <data name="EmailFailed" xml:space="preserve">
    <value>Failed to send email. Error message: {0}</value>
  </data>
  <data name="EmailSent" xml:space="preserve">
    <value>Email sent successfully.</value>
  </data>
  <data name="EnterChoice" xml:space="preserve">
    <value>Enter your choice: </value>
  </data>
  <data name="EnterReceiverEmail" xml:space="preserve">
    <value>Enter receiver's email address:</value>
  </data>
  <data name="EnterSenderEmail" xml:space="preserve">
    <value>Enter sender's email address:</value>
  </data>
  <data name="EnterSenderPassword" xml:space="preserve">
    <value>Enter sender's password:</value>
  </data>
  <data name="ErrorWritingReport" xml:space="preserve">
    <value>Error writing launch analysis report: {0}</value>
  </data>
  <data name="FolderNotExist" xml:space="preserve">
    <value>Specified folder does not exist.</value>
  </data>
  <data name="FolderPath_Error" xml:space="preserve">
    <value>The specified folder does not exist.</value>
  </data>
  <data name="FolderPath_Prompt" xml:space="preserve">
    <value>Enter the folder path containing weather forecasts:</value>
  </data>
  <data name="FolderPath_Selected" xml:space="preserve">
    <value>Selected folder: {0}</value>
  </data>
  <data name="FolderPath_UnexpectedError" xml:space="preserve">
    <value>An unexpected error occurred:</value>
  </data>
  <data name="Introduction" xml:space="preserve">
    <value>    Hello! You are about to create and send a Launch Analysis Report.
    To proceed successfully, you will need .csv files.
    Please ensure that each file is named after the location it represents, for example: Kourou.csv.
    It's important to note that the analysis will not work unless we have all files in the correct format!
    If you're ready, we can proceed.</value>
  </data>
  <data name="InvalidCloudType" xml:space="preserve">
    <value>Invalid cloud type: {0}. Please enter one of the following: Cumulus, Stratus, Nimbus, Cirrus.</value>
  </data>
  <data name="InvalidDataCloudType" xml:space="preserve">
    <value>Invalid cloud type {0} on Day {1}. Please provide one of the following: Cirrus, Stratus, Cumulus, Nimbus.</value>
  </data>
  <data name="InvalidDataFormatErrorMessage" xml:space="preserve">
    <value>Error: Invalid data format in the file. {0}</value>
  </data>
  <data name="InvalidDataFormatForDay" xml:space="preserve">
    <value>Invalid data format for Day {0}. Please provide data for all 16 parameters.</value>
  </data>
  <data name="InvalidDataFormatForDayParameter" xml:space="preserve">
    <value>Invalid data format for Parameter {0}, Day {1}. Please provide a valid integer.</value>
  </data>
  <data name="InvalidDataFormatForLightning" xml:space="preserve">
    <value>Invalid data format for Lightning on Day {0}. Please provide 'Yes' or 'No'.</value>
  </data>
  <data name="InvalidDataFormatForTemperature" xml:space="preserve">
    <value>Invalid data format for Temperature on Day {0}. Please provide a valid integer.</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Invalid email address. Please enter a valid email address.</value>
  </data>
  <data name="InvalidInput" xml:space="preserve">
    <value>Invalid input. Please enter a valid number.</value>
  </data>
  <data name="InvalidLightningsInput" xml:space="preserve">
    <value>Invalid input. Please enter 'Yes' or 'No'.</value>
  </data>
  <data name="InvalidNumberOfLines" xml:space="preserve">
    <value>Invalid number of lines in the file. Please provide a file with exactly 7 lines.</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>Invalid password. Please enter a valid password.</value>
  </data>
  <data name="Language_Prompt" xml:space="preserve">
    <value>Please select the language you want to continue with (EN or DE)</value>
  </data>
  <data name="MaxHumidity" xml:space="preserve">
    <value>Max Humidity:</value>
  </data>
  <data name="MaxHumidityPrompt" xml:space="preserve">
    <value>Enter the new value for Max Humidity:</value>
  </data>
  <data name="MaxHumiditySuccess" xml:space="preserve">
    <value>Max Humidity changed successfully.</value>
  </data>
  <data name="MaxPrecipitation" xml:space="preserve">
    <value>Max Precipitation:</value>
  </data>
  <data name="MaxPrecipitationPrompt" xml:space="preserve">
    <value>Enter the new value for Max Precipitation:</value>
  </data>
  <data name="MaxPrecipitationSuccess" xml:space="preserve">
    <value>Max Precipitation changed successfully.</value>
  </data>
  <data name="MaxTemperature" xml:space="preserve">
    <value>Max Temperature:</value>
  </data>
  <data name="MaxTemperaturePrompt" xml:space="preserve">
    <value>Enter the new value for Max Temperature:</value>
  </data>
  <data name="MaxTemperatureSuccess" xml:space="preserve">
    <value>Max Temperature changed successfully.</value>
  </data>
  <data name="MaxWind" xml:space="preserve">
    <value>Max Wind:</value>
  </data>
  <data name="MaxWindPrompt" xml:space="preserve">
    <value>Enter the new value for Max Wind:</value>
  </data>
  <data name="MaxWindSuccess" xml:space="preserve">
    <value>Max Wind changed successfully.</value>
  </data>
  <data name="MinTemperature" xml:space="preserve">
    <value>Min Temperature:</value>
  </data>
  <data name="MinTemperaturePrompt" xml:space="preserve">
    <value>Enter the new value for Min Temperature:</value>
  </data>
  <data name="MinTemperatureSuccess" xml:space="preserve">
    <value>Min Temperature changed successfully.</value>
  </data>
  <data name="NewValue" xml:space="preserve">
    <value>Enter the new value for </value>
  </data>
  <data name="No" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="NoChangesMade" xml:space="preserve">
    <value>No Changes were made.</value>
  </data>
  <data name="NoCSVFiles" xml:space="preserve">
    <value>The selected folder does not contain any .csv files.</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password is required.</value>
  </data>
  <data name="ReceiverEmail" xml:space="preserve">
    <value>Receiver's email address is required.</value>
  </data>
  <data name="ReportCreatedSuccessfully" xml:space="preserve">
    <value>Launch analysis report created successfully at: {0}</value>
  </data>
  <data name="SenderEmail" xml:space="preserve">
    <value>Sender's email address is required.</value>
  </data>
  <data name="SMTPSelection" xml:space="preserve">
    <value>SMTP server selection is required.</value>
  </data>
  <data name="UnexpectedErrorGetFolder" xml:space="preserve">
    <value>An unexpected error occurred while getting folder and CSV files: {0}</value>
  </data>
  <data name="UnexpectedErrorMessage" xml:space="preserve">
    <value>An unexpected error occurred: {0}</value>
  </data>
  <data name="UnknownSpaceport" xml:space="preserve">
    <value>Unknown spaceport: {0}. Cannot calculate distance.</value>
  </data>
  <data name="WeatherCheck_Error" xml:space="preserve">
    <value>An error occurred while checking weather conditions. Please enter another file path.</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>yes</value>
  </data>
</root>